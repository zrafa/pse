
XINU avr es una versión de XINU para ser utilizado como RTOS en arquitectura
AVR. Esta versión de XINU RTOS presenta los siguientes directorios de 
código fuente:

config/Configuration	: archivo de configuracion general
include/		: cabeceras del kernel de XINU RTOS y sus bibliotecas
lib/			: codigo fuente de las bibliotecas de XINU RTOS
device/			: codigo fuente de los drivers de XINU RTOS
system/			: codigo fuente del kernel de XINU RTOS
main/			: codigo fuente de la aplicación embebida

En general, el único directorio donde se trabaja es debajo de main/.
Esta versión de XINU RTOS trae un gestor de memoria dinámica, gestor de tareas 
(procesos), un driver del timer que el planificador de CPU del kernel de 
XINU utiliza para obtener la CPU en intervalos regulares. Tambien para
gestionar los procesos que delegaron voluntariamente la CPU via los system
calls sleep() o sleepms() (y activarlos cuando sea necesario).

El sistema trabaja en base a prioridades. El scheduller pone a ejecutar
siempre al proceso de la mas alta prioridad. Si existen varios procesos
con la misma prioridad el scheduller utiliza algoritmo round-robin 
para asignar la CPU a cada proceso. 
Cada proceso utiliza la CPU durante un milisegundo (1ms). Luego, el timer
interrumpe la CPU, y el kernel de XINU obtiene el control de la CPU.
Si no existe otro proceso listo para ejecutar con la prioridad necesaria,
entonces el kernel de XINU asigna la CPU nuevamente al proceso que la estaba
utilizando.

Cuando un proceso desea colaborativamente delegar la CPU por un lapso de tiempo
puede utilizar los system calls sleep() o sleepms(). El kernel XINU pone
a ese proceso en estado DURMIENDO, y le asigna la CPU al proceso con la 
mas alta prioridad en estado de LISTO.

Si no existe ningun proceso en estado de LISTO, entonces el kernel de XINU
le asigna la CPU al proceso null.

Esta versión de XINU utiliza el timer0 del AVR. POR LO QUE NO PUEDE 
USARSE ESE TIMER! para la aplicación embebida.

También utiliza inicialmente el UART a 9600. Se puede agregar en main/
un driver UART propio, pero se debe establecer la velocidad a 9600 (vea la
aplicación de ejemplo).

Cuando XINU RTOS "inicia", realiza dos veces un parpadeo del led de la placa.
También informa la cantidad de memoria libre para usar para los procesos.
En total, existen 1280 bytes de memoria libre.
system/initialize.c crea el proceso main, y le asigna 256 bytes de esa memoria
libre.


Configuracion
-------------

El archivo config/Configuration tiene la configuración general del kernel.
Por ejemplo, ahí se define cuantos procesos máximo puede gestionar el sistema.
De manera predeterminada son 4.
main y nullp son procesos, así que sólo se pueden agregar dos procesos
a esos dos.

Si se desea contar con mas procesos, se modifica la línea 
#define NPROC        4          /* number of user processes             */

Xinu utiliza al menos 100 bytes por cada proceso aproximadamente.
Así que cada vez que incrementen esa configuración en 1 van a contar
con 100 bytes menos de RAM.

Ejemplo de configuración extrema
--------------------------------

Este ejemplo es mas o menos lo máximo que se puede exprimir este MCU
con este RTOS.

En config/Configuration:

#define NPROC        7          /* number of user processes             */
#define NSEM         0          /* number of semaphores                 */

Aquí definimos 7 tareas máximo (recuerden que main y nullp ya son dos tareas).
Podrían agregar máximo 5 tareas más.
Semáforos de XINU 0. Eso nos da 100 bytes extras libres.

Con esa configuración, quedan 1100 bytes aproximadamente para repartir 
entre todas las tareas y variables globales.

Supongamos que tenemos 
tarea 1		nullp (64 bytes de pila)
tarea 2		main (256 bytes de pila)
tarea 3		64 bytes de pila
tarea 4		64 bytes de pila
tarea 5		64 bytes de pila
tarea 6		256 bytes de pila
tarea 7		256 bytes de pila

Aquí estaríamos usando 1024 bytes de los 1100 libres. Casi no queda para nada.
Ejemplo, casi queda muy poca RAM para variables globales.

Las constantes tambien consumen RAM:
Toda constante tipo serial_put_str("quiero mandar un mensaje por consola");
Ese "quiero mandar un mensaje por consola" usa 36 bytes de RAM.

Las tareas que no tienen variables locales (o tiene solo un par) y no llaman
a otras funciones pueden usar 64 bytes de pila.
Ejemplo, la tarea que parpadea un led.
Las tareas que llaman a dos o tres funciones anidadas, con poco uso de
variables locales tal vez funcione bien con 128 bytes de pila.


Listado de algunos System calls de XINU RTOS
--------------------------------------------

create()	: crea un nuevo proceso (tarea)
resume(pid)	: pone en estado de LISTO a un proceso
sleep(n)	: el proceso delega la CPU al kernel XINU por n segundos
sleepms(n)	: el proceso delega la CPU al kernel XINU por n milisegundos
suspend(pid)	: se le solicita al kernel XINU que suspenda al proceso pid
getpid()
getprio()
kill(pid)	: finalizar un proceso (tarea)
kprinf( *char)	: utiliza el driver UART del kernel para emitir un msg 
send(pid, msg)	: enviar el mensaje msg (un entero) a pid (no bloqueante)
receive()	: el proceso espera por un mensaje (system call bloqueante)
recvclr()


Funciones de biblioteca para utilizar semáforos
-----------------------------------------------

Existen 4 semáforos para utilizar (para implementar un mutex, o 
un sincronismo productor-consumidor, o implementar un buffer circular, etc).

Se puede ampliar la cantidad de semáforos editando include/sync.h
(nota: utilizar muchos semáforos puede volver complejo la verificación
del sistema).

sync_wait(n)	: espera a que el semáforo n esté habilitado
sync_signal(n)	: señaliza el semáforo n 

